import unittest
from utilities import Resizer, Converter

class ResizerTestCase(unittest.TestCase):
    def setUp(self):
        self.resizer = Resizer(600, 600)

    def test_calc_under_both(self):
        # どちらも以下ならそのまま
        self.assertEqual(self.resizer.calc(600, 600), (600, 600))

    def test_calc_over_width(self):
        # widthが倍なら、heightもwidthも半分
        self.assertEqual(self.resizer.calc(1200, 600), (600, 300))
    
    def test_calc_over_height(self):
        # heightが倍なら、widthもheightも半分
        self.assertEqual(self.resizer.calc(600, 1200), (300, 600))

    def test_calc_over_width_x4(self):
        # widthが大きいから、widthにあわせてリサイズ
        self.assertEqual(self.resizer.calc(1200, 2400), (300, 600))
    
    def test_calc_over_height_x4(self):
        # heightが大きいから、heightにあわせてリサイズ
        self.assertEqual(self.resizer.calc(2400, 1200), (600, 300))

class ConverterTestCase(unittest.TestCase):
    def setUp(self):
        self.code = "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"
        self.converter = Converter()

    def test_convert(self):
        self.assertIsNotNone(self.converter.convert(self.code))